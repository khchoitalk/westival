<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="festivalMapper">

	<resultMap type="Festival" id="resultFestival">
		<id property="no" column="no" />
		<result property="reg_user" column="reg_user" />
		<result property="name" column="name" />
		<result property="address" column="address" />
		<result property="original_img_name" column="original_img_name" />
		<result property="new_img_name" column="new_img_name" />
		<result property="content" column="content" />
		<result property="start_date" column="start_date" />
		<result property="end_date" column="end_date" />
		<result property="theme" column="theme" />
		<result property="telephone" column="telephone" />
		<result property="manage" column="manage" />
		<result property="ticket" column="ticket" />
		<result property="file_name" column="file_name" />
		<result property="tag" column="tag" />
		<result property="read_count" column="read_count" />
		<result property="recommend" column="recommend" />
	</resultMap>

	<resultMap type="Festival" id="resultList">
		<id property="no" column="no" />
		<result property="reg_user" column="reg_user" />
		<result property="name" column="name" />
		<result property="address" column="address" />
		<result property="original_img_name" column="original_img_name" />
		<result property="new_img_name" column="new_img_name" />
		<result property="content" column="content" />
		<result property="start_date" column="start_date" />
		<result property="end_date" column="end_date" />
		<result property="theme" column="theme" />
		<result property="telephone" column="telephone" />
		<result property="manage" column="manage" />
		<result property="ticket" column="ticket" />
		<result property="file_name" column="file_name" />
		<result property="tag" column="tag" />
		<result property="read_count" column="read_count" />
		<result property="recommend" column="recommend" />
	</resultMap>

	<insert id="insertFestival" parameterType="Festival" flushCache="true"
		statementType="PREPARED" useGeneratedKeys="true">
		insert into tb_festival values (festival_seq.nextval, #{reg_user},
		#{name},
		#{address}, #{original_img_name}, #{new_img_name}, #{content},
		#{start_date}, #{end_date},
		#{theme}, #{telephone}, #{manage}, #{ticket},
		<choose>
			<when test="file_name==null">
				null,
			</when>
			<when test="file_name!=null">
				#{file_name},
			</when>
		</choose>
		#{tag}, default, default, default)
	</insert>

	<select id="locationSearch" resultMap="resultList" parameterType="java.util.HashMap">
		<![CDATA[
		select * 
		from (select rownum rnum, no, name, new_img_name, address, start_date, end_date, theme, tag, recommend, content
				from (select * 
						from tb_festival
						where address like '%'||#{address}||'%'
		and start_date <= #{start_date} and end_date >= #{end_date} and delete_check ='N' ]]> 
		<if test="theme_list.size!=0">
			and theme like
			<foreach collection="theme_list" item="item" separator=" and theme like ">
				'%'||#{item}||'%'
			</foreach>
		</if>
		)) 

		<![CDATA[
		where rnum >= #{startRow} and rnum <= #{endRow}
		]]>	
	</select>

	<select id="tagSearch" resultMap="resultList" parameterType="java.util.HashMap">
		<![CDATA[
		select * 
		from (select rownum rnum, no, name, new_img_name, address, start_date, end_date, theme, tag, recommend, content
				from (select * 
						from tb_festival
						where tag like '%'||#{tag}||'%' and delete_check ='N'))
		where rnum >= #{startRow} and rnum <= #{endRow}
		]]>
	</select>

	<select id="top3FestivalSearch" resultMap="resultList">
		<![CDATA[
		SELECT * 
		FROM (SELECT ROWNUM RNUM, no, name, address, start_date, end_date, new_img_name, tag, theme  
		  	  FROM (SELECT * 
		          	FROM tb_festival 
		          	WHERE delete_check ='N'
					ORDER BY recommend DESC)) 
		WHERE RNUM >= 1 AND RNUM <= 3
		]]>
	</select>

	<select id="selectFestivalName" parameterType="_int" resultType="string">
		select name from tb_festival where no = #{no}
	</select>

	<select id="todayFestivalCount" resultType="_int" parameterType="date">
		<![CDATA[
		SELECT count(*) 
		FROM tb_festival
		where start_date<= #{currentDate} and end_date >= #{currentDate} and delete_check ='N'
		]]>
	</select>

	<select id="todayFestivalSearch" resultMap="resultList" parameterType="java.util.HashMap">
		<![CDATA[
		select * 
		from (select rownum rnum, no, name, new_img_name, address, start_date, end_date, theme, tag 
				from (select * 
						from tb_festival
						where start_date <= #{currentDate} and end_date >= #{currentDate} and delete_check ='N')) 
		where rnum >= #{startRow} and rnum <= #{endRow}	
		]]>
	</select>
	
	<select id="locationSearchCount" resultType="_int" parameterType="java.util.HashMap">
		<![CDATA[
		select count(*) from tb_festival 
		where address like '%'||#{address}||'%' and delete_check ='N'
		and start_date <= #{start_date} and end_date >= #{end_date}		
		]]>
		<if test="theme_list.size!=0">
			and theme like
			<foreach collection="theme_list" item="item" separator=" and theme like ">
				'%'||#{item}||'%'
			</foreach>
		</if>
	</select>
	
	<select id="tagSearchCount" resultType="_int" parameterType="Festival">
		<![CDATA[
		select count(*) from tb_festival 
		where tag like '%'||#{tag}||'%'	and delete_check ='N'
		]]>
	</select>





	<!-- 다혜 -->

	<resultMap type="FestivalReply" id="resultReplyList">
		<result property="reply_no" column="reply_no" />
		<result property="reply_user_id" column="reply_user_id" />
		<result property="reply_content" column="reply_content" />
		<result property="reply_date" column="reply_date" />
		<result property="festival_no" column="festival_no" />
		<result property="reply_seq" column="reply_seq" />
	</resultMap>

	<resultMap type="Scrap" id="resultScrap">
		<result property="user_id" column="user_id" />
		<result property="no" column="no" />
	</resultMap>

	<resultMap type="Recommend" id="resultRecommend">
		<result property="user_id" column="user_id" />
		<result property="no" column="no" />
		<result property="recommend_date" column="recommend_date" />
	</resultMap>

	<select id="infoFestival" parameterType="_int" resultMap="resultFestival">
		<![CDATA[select * from tb_festival where no = #{no} and delete_check ='N']]>
	</select>

	<select id="listCount" parameterType="_int" resultType="int">
		<![CDATA[select count(*) from tb_festival_reply where festival_no = #{no}]]>
	</select>

	<select id="selectReplyList" parameterType="java.util.Map"
		resultMap="resultReplyList">
		<!-- <![CDATA[select * from tb_festival_reply where festival_no = #{no}]]> -->
		<![CDATA[
		select * from (select ROWNUM RNUM, reply_no, reply_user_id, reply_content, reply_date,
		festival_no, reply_seq from (select * from tb_festival_reply where festival_no = #{no} order by reply_no DESC, reply_seq DESC))
		where RNUM >= #{startRow} and RNUM <= #{endRow}
		]]>
	</select>

	<insert id="insertReply" parameterType="FestivalReply"
		flushCache="true" statementType="PREPARED" useGeneratedKeys="true">
		<![CDATA[
		insert into tb_festival_reply values ((select NVL(max(reply_no)+1,1) from tb_festival_reply), #{reply_user_id}, #{reply_content},
		sysdate, #{festival_no}, (select NVL(max(reply_seq)+1,1) from tb_festival_reply where festival_no = #{festival_no} ))
		]]>
	</insert>

	<update id="updateReply" parameterType="FestivalReply"
		flushCache="true" statementType="PREPARED">
		<![CDATA[
		update tb_festival_reply set reply_content = #{reply_content} where reply_no = #{reply_no}
		]]>
	</update>

	<delete id="deleteReply" parameterType="_int" flushCache="true"
		statementType="PREPARED">
		<![CDATA[delete from tb_festival_reply where reply_no = #{reply_no}]]>
	</delete>

	<update id="updateCount" parameterType="_int" flushCache="true"
		statementType="PREPARED">
		<![CDATA[
		update tb_festival set read_count = read_count + 1 where no = #{no}
		]]>
	</update>

	<select id="scrapCheck" parameterType="Scrap" resultType="_int">
		<![CDATA[select count(*) from tb_scrap where user_id = #{user_id} and no = #{no}]]>
	</select>

	<insert id="insertScrap" parameterType="Scrap" flushCache="true"
		statementType="PREPARED" useGeneratedKeys="true">
		<![CDATA[
		insert into tb_scrap values (#{user_id}, #{no})
		]]>
	</insert>

	<delete id="deleteScrap" parameterType="Scrap" flushCache="true"
		statementType="PREPARED">
		<![CDATA[delete from tb_scrap where user_id = #{user_id} and no = #{no}]]>
	</delete>

	<select id="recommendCheck" parameterType="Recommend"
		resultType="_int">
		<![CDATA[select count(*) from tb_recommend where user_id = #{user_id} and no = #{no}]]>
	</select>

	<insert id="insertRecommend" parameterType="Recommend"
		flushCache="true" statementType="PREPARED" useGeneratedKeys="true">
		<![CDATA[
		insert into tb_recommend values (#{user_id}, #{no}, sysdate)
		]]>
	</insert>

	<delete id="deleteRecommend" parameterType="Recommend"
		flushCache="true" statementType="PREPARED">
		<![CDATA[delete from tb_recommend where user_id = #{user_id} and no = #{no}]]>
	</delete>
	
	<select id="selectTotalValueFes" parameterType="_int" resultType="_int">
		select NVL(count(b.user_gender), 0) from tb_recommend a
		join tb_user b
		on a.user_id = b.user_id
		where a.no = #{no}
	</select>
	
	<select id="selectMaleValueFes" parameterType="_int" resultType="_int">
		select NVL(count(b.user_gender), 0) from tb_recommend a
		join tb_user b
		on a.user_id = b.user_id
		where a.no = #{no} and b.user_gender = 'M'
	</select>
	
	<select id="selectFemaleValueFes" parameterType="_int" resultType="_int">
		select NVL(count(b.user_gender), 0) from tb_recommend a
		join tb_user b
		on a.user_id = b.user_id
		where a.no = #{no} and b.user_gender = 'F'
	</select>
	
	<!-- 다혜 추가 -->
	<resultMap type="Age" id="resultAge">
		<result property="age10" column="age10" />
		<result property="age20" column="age20" />
		<result property="age30" column="age30" />
		<result property="age40" column="age40" />
		<result property="age50" column="age50" />
		<result property="totalAge" column="totalAge" />
	</resultMap>
	
	<select id="selectAge" parameterType="_int" resultMap="resultAge">
	<![CDATA[
		select count(case when age < 20 then 1 end) as "age10",
		count(case when age like '2%' then 1 end) as "age20",
		count(case when age like '3%' then 1 end) as "age30",
		count(case when age like '4%' then 1 end) as "age40",
		count(case when age > 50 then 1 end) as "age50",
		count(*) as totalAge
		from (
		select TRUNC(MONTHS_BETWEEN(sysdate, user_birth)/12)+1 as age
		from tb_recommend a
		join tb_user b
		on a.user_id = b.user_id
		where a.no = #{no}
		)
		]]>
	</select>

</mapper>
