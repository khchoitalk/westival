<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="communityMapper">

	<resultMap type="Community" id="resultList">
		<result property="community_no" column="community_no" />
		<result property="no" column="no" />
		<result property="user_id" column="user_id" />
		<result property="category" column="category" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="read_count" column="read_count" />
		<result property="community_date" column="community_date" />
		<result property="user_count" column="user_count" />
	</resultMap>
	
	<resultMap type="Community" id="resultCommunity">
		<result property="community_no" column="community_no" />
		<result property="no" column="no" />
		<result property="user_id" column="user_id" />
		<result property="category" column="category" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="read_count" column="read_count" />
		<result property="community_date" column="community_date" />
		<result property="user_count" column="user_count" />
	</resultMap>
	
	<resultMap type="CommunityReply" id="resultCommunityReply">
		<result property="comment_no" column="comment_no" />
		<result property="community_no" column="community_no" />
		<result property="comment_content" column="comment_content" />
		<result property="comment_level" column="comment_level" />
		<result property="comment_seq" column="comment_seq" />
		<result property="comment_date" column="comment_date" />
		<result property="comment_ref" column="comment_ref" />
	</resultMap>
	
	<resultMap type="Festival" id="resultFestivalList">
		<id property="no" column="no" />
		<result property="reg_user" column="reg_user" />
		<result property="name" column="name" />
		<result property="address" column="address" />
		<result property="original_img_name" column="original_img_name" />
		<result property="new_img_name" column="new_img_name" />
		<result property="content" column="content" />
		<result property="start_date" column="start_date" />
		<result property="end_date" column="end_date" />
		<result property="theme" column="theme" />
		<result property="telephone" column="telephone" />
		<result property="manage" column="manage" />
		<result property="ticket" column="ticket" />
		<result property="file_name" column="file_name" />
		<result property="tag" column="tag" />
		<result property="read_count" column="read_count" />
		<result property="recommend" column="recommend" />
	</resultMap>
	
	<!-- private int comment_no;                  //댓글번호
   private String user_id;                     //작성자
   private int community_no;               //게시글번호
   private String comment_content;         //댓글내용
   private int comment_level;               //댓글레벨
   private int comment_seq;               //댓글순번
   private Date comment_date;            //댓글작성일자
   private int comment_ref;                  //참조댓글번호 -->
	
	<!-- 페이징처리용 -->
	<select id="selectCount" resultType="_int">
		<![CDATA[select count(*) from tb_community]]>
	</select>
	
	<!-- 커뮤니티 게시글 리스트 조회 -->
	<select id="selectCommunityList" parameterType="CommunityPaging" resultMap="resultList">
		<![CDATA[
		select * from (select rownum rnum, community_no, no, user_id, category, title, content, 
				read_count, community_date, user_count 
        from (select * from tb_community order by community_no desc)) 
		where rnum  >=  #{startRow} and rnum <= #{endRow}
		]]>
	</select>
	
	<!-- 게시글 상세보기 -->
	<select id="selectCommunity" parameterType="_int" resultMap="resultCommunity">
		<![CDATA[select * from tb_community where community_no = #{community_no}]]>
	</select>
	
	<!-- 필터조회 페이징 -->
	<select id="selectFilterCount" resultType="_int" parameterType="map">
		select count(*) from tb_community
		
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="category == 'nomal'">
		      	category = '일반'
		    </if>
		    <if test="category == 'accompany'">
		      	category = '동행'
		    </if>
		    <if test="search == 'all' and keyword != ''">
			    and (title like '%'||#{keyword}||'%' or 
				content like '%'||#{keyword}||'%' or
				user_id like '%'||#{keyword}||'%')
		    </if>
		    <if test="search == 'title' and keyword != ''">
			    and title like '%'||#{keyword}||'%'
		    </if>
		    <if test="search == 'content' and keyword != ''">
			    and content like '%'||#{keyword}||'%'
		    </if>
		    <if test="search == 'writer' and keyword != ''">
			    and user_id like '%'||#{keyword}||'%'
		    </if>
			<!-- <if test="category == 'nomal'">
				category = '일반'
			</if>
			<if test="accompany == 'accompany'">
				category = '동행'
			</if>
			
			<if test="search == 'all'">
				and title like '%'||#{keyword}||'%' or 
				content like '%'||#{keyword}||'%' or
				user_id like '%'||#{keyword}||'%'
			</if>
			<if test="search == 'title'">
				and title like '%'||#{keyword}||'%'
			</if>
			<if test="search == 'content'">
				and content like '%'||#{keyword}||'%'
			</if>
			<if test="search == 'writer'">
				and user_id like '%'||#{keyword}||'%'
			</if> -->
		</trim>
	</select>
	
	<!-- 필터조회 리스트 -->
	<select id="selectFilterList" parameterType="map" resultMap="resultList">
		select * from (select rownum rnum, community_no, no, user_id, category, title, content, 
				read_count, community_date, user_count 
        from (select * from tb_community 
       
        <trim prefix="WHERE" prefixOverrides="AND">
        	<!-- <choose> -->
		    <if test="category == 'nomal'">
		      	category = '일반'
		    </if>
		    <if test="category == 'accompany'">
		      	category = '동행'
		    </if>
		    <if test="search == 'all' and keyword != ''">
			    and (title like '%'||#{keyword}||'%' or 
				content like '%'||#{keyword}||'%' or
				user_id like '%'||#{keyword}||'%')
		    </if>
		    <if test="search == 'title' and keyword != ''">
			    and title like '%'||#{keyword}||'%'
		    </if>
		    <if test="search == 'content' and keyword != ''">
			    and content like '%'||#{keyword}||'%'
		    </if>
		    <if test="search == 'writer' and keyword != ''">
			    and user_id like '%'||#{keyword}||'%'
		    </if>
		    
		    <!-- <otherwise> -->
		    	order by community_no desc)) 
				where rnum  &gt;=  #{startRow} and rnum &lt;= #{endRow}
		    <!-- </otherwise> -->
		  	<!-- </choose> -->
        </trim>
        
        <!-- <trim prefix="WHERE" prefixOverrides="AND">
			<if test="category == 'nomal'">
				category = '일반'
			</if>
			<if test="accompany == 'accompany'">
				category = '동행'
			</if>
			
			<if test="search == 'all'">
				and title like '%'||#{keyword}||'%' or 
				content like '%'||#{keyword}||'%' or
				user_id like '%'||#{keyword}||'%'
			</if>
			<if test="search == 'title'">
				and title like '%'||#{keyword}||'%'
			</if>
			<if test="search == 'content'">
				and content like '%'||#{keyword}||'%'
			</if>
			<if test="search == 'writer'">
				and user_id like '%'||#{keyword}||'%'
			</if>
			
			order by community_no desc)) 
			where rnum  &gt;=  #{startRow} and rnum &lt;= #{endRow}
		</trim> -->
	</select>
	
	<!-- 축제명 리스트 -->
	
	<select id="selectFestivalNameList" resultMap="resultFestivalList">
		select * from tb_festival
	</select>
	
	<!-- 글쓰기 -->
	<insert id="insertCommunity" parameterType="Community" flushCache="true"
		statementType="PREPARED" useGeneratedKeys="true">
		insert into tb_community values (
		
		<choose>
	    <when test="no != 0">
	      community_seq.nextval, #{no}, #{user_id}, #{category},
				#{title}, #{content}, default, sysdate, #{user_count})
	    </when>
	    <otherwise>
	      community_seq.nextval, null, #{user_id}, #{category},
				#{title}, #{content}, default, sysdate, null)
	    </otherwise>
	  	</choose>
	</insert>

	<!-- 조회수 증가용 -->
	<update id="updateCommunityReadCount" parameterType="_int" flushCache="true"
		statementType="PREPARED">
		<![CDATA[
		update tb_community set read_count = read_count + 1 where community_no = #{community_no}
		]]>
	</update>
	
	<!-- 상세보기 축제 이미지 -->
	<select id="selectFestivalImage" parameterType="_int" resultMap="resultFestivalList">
		select * from tb_festival where no = #{no}
	</select>
	
	<!-- 댓글등록 -->
	<insert id="insertCommunityReply" parameterType="CommunityReply" flushCache="true"
		statementType="PREPARED" useGeneratedKeys="true">
		<![CDATA[
		insert into tb_community_reply values 
		(community_reply_seq.nextval, #{user_id}, #{community_no},
		#{comment_content}, #{comment_level}, (select NVL(max(comment_seq)+1,1) from tb_community_reply where community_no = #{community_no}),
		sysdate, #{comment_ref})
		]]>
	</insert>
	
	<!-- 댓글 목록 -->
	<select id="selectCommunityReplyList" parameterType="_int" resultMap="resultCommunityReply">
		<![CDATA[
		select * from (select ROWNUM RNUM, comment_no, user_id, community_no, comment_content,
		comment_level, comment_seq, comment_date, comment_ref
		from (select * from tb_community_reply where community_no = #{no} order by comment_no asc, comment_seq asc))
		]]>
	</select>
 
	<select id="selectCommunityReplyCount" parameterType="_int" resultType="_int">
		select count(*) from tb_community_reply where community_no = #{no}
	</select>
	
	<delete id="deleteCommunity" parameterType="_int" flushCache="true"
		statementType="PREPARED">
		<![CDATA[delete from tb_community where community_no = #{community_no}]]>
	</delete> 
	
	<delete id="deleteCommunityReply" parameterType="_int" flushCache="true"
		statementType="PREPARED">
		<![CDATA[delete from tb_community_reply where comment_no = #{comment_no}]]>
	</delete> 
 	
 	<update id="updateCommunity" parameterType="Community" flushCache="true"
		statementType="PREPARED">
		update tb_community set category = #{category}, title = #{title}, content = #{content} 
		<if test="no != null">
		, no = #{no}, user_count = #{user_count} 
		</if>
		where community_no = #{community_no}
	</update>
	
	<update id="updateCommunityReply" parameterType="CommunityReply" flushCache="true"
		statementType="PREPARED">
		update tb_community_reply set comment_content = #{comment_content}, comment_date = sysdate 
		where comment_no = #{comment_no}
	</update>
	
	
	<!-- community.setCommunity_no(Integer.parseInt((String)request.getParameter("community_no")));
		community.setCategory(request.getParameter("category"));
		community.setTitle(request.getParameter("title"));
		community.setContent(request.getParameter("content"));
		
		if(community.getCategory() == "동행"){
			community.setUser_count(Integer.parseInt((String)request.getParameter("user_count")));
			community.setNo(Integer.parseInt((String)request.getParameter("no")));
		} -->
 
	<!-- 

	<select id="loginCheck" parameterType="Member" resultType="Member" resultMap="resultMember">
		<![CDATA[
		select * from member where userid = #{userid} and userpwd = #{userpwd}
		]]>
	</select>	
	
	<select id="selectList" resultMap="resultList">
		<![CDATA[select * from member]]>
	</select>

	<select id="selectMember" parameterType="string" resultMap="resultMember">
		<![CDATA[select * from member where userid = #{userId}]]>
	</select>

	<select id="dupId" parameterType="string" resultType="_int">
		<![CDATA[select count(userid) from member where userid = #{userId}]]>
	</select>

	<insert id="insertMember" parameterType="Member" flushCache="true"
		statementType="PREPARED" useGeneratedKeys="true">
		<![CDATA[
		insert into member values (#{userId}, #{userPwd}, #{userName},
		#{gender}, #{age}, #{phone}, #{email}, #{hobby}, #{etc},
		sysdate, sysdate)
		]]>
	</insert>

	<update id="updateMember" parameterType="Member" flushCache="true"
		statementType="PREPARED">
		<![CDATA[
		update member set userpwd = #{userpwd}, age = #{age}, email =
		#{email}, phone = #{phone}, hobby = #{hobby}, etc = #{etc} where
		userid = #{userid}
		]]>
	</update>

	<delete id="deleteMember" parameterType="string" flushCache="true"
		statementType="PREPARED">
		<![CDATA[delete from member where userid = #{userid}]]>
	</delete> -->

</mapper>
